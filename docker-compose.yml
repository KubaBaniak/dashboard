services:
  backend:
    container_name: backend
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    env_file:
      - ./backend/.env
    environment:
      NODE_ENV: production
    ports:
      - "3001:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    env_file:
      - ./frontend/.env
    environment:
      NODE_ENV: production
      PORT: 3000
      HOSTNAME: 0.0.0.0
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_started
    restart: unless-stopped

  postgres:
    image: postgres:17-alpine
    env_file:
      - ./backend/.env.postgres
    ports:
      - "5432:5432"
    volumes:
      - pg-data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "psql -U $${POSTGRES_USER} -d $${POSTGRES_DB} -c 'SELECT 1' || exit 1",
        ]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: ["redis-server", "--appendonly", "yes"]
    restart: unless-stopped

volumes:
  pg-data:
  redis-data:
